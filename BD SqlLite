import sqlite3


nombre_db = 'inventario_de_frutas.db'

def conectar_db():
    """Conectar a SQLite."""
    try:
        conexion = sqlite3.connect(nombre_db)
        return conexion
    except sqlite3.Error as e:
        print(f"No se puede conectar a la BD: {e}") #print(f"No se puede conectar a la BD: {e}")#
        return None

def crear_tablas():
    """Crea la tabla en la BD if not exists."""
    conexion = conectar_db()
    if conexion:
        cursor = conexion.cursor()

        cursor.execute("""
            CREATE TABLE IF NOT EXISTS FRUTAS (
                id_producto INTEGER PRIMARY KEY AUTOINCREMENT,
                nombre TEXT NOT NULL UNIQUE,
                precio_por_kg REAL NOT NULL,
                detalle TEXT NOT NULL UNIQUE
            )
        """)

        cursor.execute("""
            CREATE TABLE IF NOT EXISTS VERDURAS (
                id_producto INTEGER PRIMARY KEY AUTOINCREMENT,
                nombre TEXT NOT NULL UNIQUE,
                precio_por_kg REAL NOT NULL,
                detalle TEXT NOT NULL UNIQUE
            )
        """)

        cursor.execute("""
            CREATE TABLE IF NOT EXISTS PROVEEDOR (
                id_venta INTEGER PRIMARY KEY AUTOINCREMENT,
                id_proveedor INTEGER NOT NULL,
                nombre TEXT NOT NULL UNIQUE,
                fecha_venta TEXT NOT NULL,
                FOREIGN KEY (id_cliente) REFERENCES clientes(id_cliente)
            )
        """)

        cursor.execute("""
            CREATE TABLE IF NOT EXISTS VENTAS_FRUTAS_VERDUDAS (
                id_detalle INTEGER PRIMARY KEY AUTOINCREMENT,
                id_venta INTEGER NOT NULL,
                id_producto INTEGER NOT NULL,
                cantidad_kg REAL NOT NULL,
                precio_unitario REAL NOT NULL,
                FOREIGN KEY (id_venta) REFERENCES ventas(id_venta),
                FOREIGN KEY (id_producto) REFERENCES productos(id_producto)
            )
        """)

        conexion.commit()
        print("Tablas creadas exitosamente.")
        conexion.close()

if __name__ == "__main__":
    crear_tablas()
